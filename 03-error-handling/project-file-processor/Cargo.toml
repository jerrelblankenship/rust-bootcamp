[package]
name = "file-processor"
version = "0.1.0"
edition = "2021"
authors = ["Rust Bootcamp Student"]
description = "A robust file processing tool with comprehensive error handling - Student Implementation"
license = "MIT"
repository = "https://github.com/rust-bootcamp/file-processor"

[[bin]]
name = "file-processor"
path = "src/main.rs"

[lib]
name = "file_processor"
path = "src/lib.rs"

[dependencies]
# CLI argument parsing
clap = { version = "4.0", features = ["derive"] }

# Serialization for config and JSON processing
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"

# CSV processing
csv = "1.3"

# Regular expressions for text processing
regex = "1.10"

# Error handling utilities (optional - students can implement without these)
thiserror = { version = "1.0", optional = true }
anyhow = { version = "1.0", optional = true }

[dev-dependencies]
# Testing utilities
tempfile = "3.8"
assert_cmd = "2.0"
predicates = "3.0"

# Benchmarking (for performance testing)
criterion = "0.5"

[features]
default = []
# Optional features for advanced error handling
advanced-errors = ["thiserror", "anyhow"]

[profile.dev]
# Fast compilation for development
opt-level = 0
debug = true
split-debuginfo = "unpacked"

[profile.release]
# Optimized for performance
opt-level = 3
debug = false
lto = "thin"
codegen-units = 1
panic = "abort"

[profile.test]
# Optimized for test performance
opt-level = 1

[[bench]]
name = "processing_benchmark"
harness = false
path = "benches/processing_benchmark.rs"

[package.metadata.docs.rs]
# Documentation configuration
all-features = true
rustdoc-args = ["--cfg", "docsrs"]

# Workspace configuration (if part of larger workspace)
# [workspace]
# members = [".", "examples/*"]

# Example configuration for students to learn from
[package.metadata.example]
# This section shows students how to configure various aspects
cli-usage = "file-processor *.json --output results/ --format summary"
config-file = "file-processor.json"
supported-formats = ["JSON", "CSV", "Text", "Markdown", "Logs"]

# Build script configuration (if needed for advanced features)
# [build-dependencies]
# Built script would go here for code generation, etc.

# Platform-specific dependencies (examples for students)
[target.'cfg(unix)'.dependencies]
# Unix-specific dependencies would go here

[target.'cfg(windows)'.dependencies]
# Windows-specific dependencies would go here

# Documentation examples
[[example]]
name = "usage"
path = "examples/usage.rs"
doc-scrape-examples = true
